var http = require('https'),
    jsonToXml = require('json-to-xml'),
    xml2js = require('xml2js');

var eBayTradingAPI = function(conf) {
        if (typeof conf != "object") {
            throw new Error("node-ebay-trading-api must be passed a configuration object")
        }
        else if (conf.appId == null || conf.devId == null || conf.certId == null || conf.siteId == null) {
            throw new Error("node-ebay-trading-api requires appId, devId, certId and a siteID")
        }
        this.options = {
            method: "POST",
            path: "/ws/api.dll",
            headers: {
                "X-EBAY-API-APP-NAME": conf.appId,
                "X-EBAY-API-DEV-NAME": conf.devId,
                "X-EBAY-API-CERT-NAME": conf.certId,
                "X-EBAY-API-COMPATIBILITY-LEVEL": "765",
                "X-EBAY-API-SITEID": conf.siteId,
                "X-EBAY-API-REQUEST-ENCODING": "XML"
            }
        };
        if (conf.use_sandbox) {
            this.options.host = "api.sandbox.ebay.com"
        }
        else {
            this.options.host = "api.ebay.com"
        }
        this.authToken = conf.authToken;
        console.log(this.authToken);
    }

eBayTradingAPI.prototype._createBody = function(name, fields) {
    var request_name = name + 'Request',
        doc = {};
    doc[request_name] = fields || {};
    doc[request_name]["-xmlns"] = "urn:ebay:apis:eBLBaseComponents";
    doc[request_name]["RequesterCredentials"] = {
        "eBayAuthToken": this.authToken
    }
    return (jsonToXml(doc));
}

eBayTradingAPI.prototype.makeRequest = function(name, callback, fields, format, authToken) {
    this.authToken = this.authToken || authToken
    if (this.authToken == undefined) {
        throw new Error("Auth token is empty. Please pass one to makeRequest or set it as a default in the configuration object"); 
    }
    format = format || "json"
    if (name == null || callback == null) {
        throw new Error("makeRequest requires a name and a callback");
    }

    this.options.headers["X-EBAY-API-CALL-NAME"] = name;

    var xmlBody = this._createBody(name, fields),
        self = this,
        req = http.request(this.options, function(response) {
            var xml_result = "";
            response.on('data', function(chunk) {
                xml_result += chunk;
            });
            response.on('end', function() {
                self._handleResponse(xml_result, format, callback);
            });

            response.on('error', function(err) {});
        });

    req.write(xmlBody);
    req.end();

    return (xmlBody);
}
eBayTradingAPI.prototype._handleResponse = function(xml, format, callback) {
    // Handle failed responses by throwing an error
    if (xml.match(/<Ack>Failure<\/Ack>/)) {

        var error = xml.match(/<LongMessage>(.+)<\/LongMessage>/);

        callback(error[1], null); // holds the error message matched above
    }
    else {
        if (format === 'json') {
            var xmlParser = new xml2js.Parser();
            xmlParser.parseString(xml, function(err, json_data) {
                callback(err, json_data);
            })
        }
        else {
            callback(null, xml);
        }
    }
}
module.exports = eBayTradingAPI;