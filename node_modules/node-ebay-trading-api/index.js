var http = require('https'),
    jsonToXml = require('json-to-xml'),
    xml2js = require('xml2js');

var eBayTradingAPI = function(conf) {
        if (conf.appId == false || conf.devId == false || conf.certId == false || conf.siteId == false || 
        conf.authToken == false) {
            throw new Error("node-ebay-trading-api requires appId, devId, certId, siteId and authToken")
        }
        this.options = {
            host: "api.ebay.com",
            method: "POST",
            path: "/ws/api.dll",
            headers: {
                "X-EBAY-API-APP-NAME": conf.appId,
                "X-EBAY-API-DEV-NAME": conf.devId,
                "X-EBAY-API-CERT-NAME": conf.certId,
                "X-EBAY-API-COMPATIBILITY-LEVEL": "765",
                "X-EBAY-API-SITEID": conf.siteId,
                "X-EBAY-API-REQUEST-ENCODING": "XML"
            }
        };
        this.authToken = conf.authToken;
    }

eBayTradingAPI.prototype._createBody = function(name, fields) {
    var request_name = name + 'Request',
        doc = {};
    doc[request_name] = {
        "-xmlns": 'urn:ebay:apis:eBLBaseComponents',
        "RequesterCredentials": {
            "eBayAuthToken": this.authToken
        }
    }

    mergeRecursive(doc[request_name], fields);
    return (jsonToXml(doc));
}

eBayTradingAPI.prototype.makeRequest = function(name, callback, fields, format) {
    if (name == false || callback == false) {
        throw new Error("makeRequest requires name and a callback");
    }

    this.options.headers["X-EBAY-API-CALL-NAME"] = name;

    var xmlBody = this._createBody(name, fields),
        self = this,
        req = http.request(this.options, function(response) {
            var xml_result = "";
            response.on('data', function(chunk) {
                xml_result += chunk;
            });
            response.on('end', function() {
                self._handleResponse(xml_result, format, callback);
            });

            response.on('error', function(err) {
                console.log("Error")
                });
        });

    req.write(xmlBody);
    req.end();
    return (xmlBody);
}
eBayTradingAPI.prototype._handleResponse = function(xml, format, callback) {
    // Handle failed responses by throwing an error
    if (xml.match(/<Ack>Failure<\/Ack>/)) {

        var error = xml.match(/<LongMessage>(.+)<\/LongMessage>/);

        callback(error[1], null); // holds the error message matched above
    }
    else {
        if (format === 'json') {
            var xmlParser = new xml2js.Parser();
            xmlParser.parseString(xml, function(err, json_data) {
                callback(err, json_data);
            })
        }
        else {
            callback(null, xml);
        }
    }
}

function mergeRecursive(obj1, obj2) {
    for (var p in obj2) {
        try {
            // Property in destination object set; update its value.
            if (obj2[p].constructor == Object) {
                obj1[p] = mergeRecursive(obj1[p], obj2[p]);
            }
            else {
                obj1[p] = obj2[p];
            }
        }
        catch (e) {
            // Property in destination object not set; create it and set its value.
            obj1[p] = obj2[p];
        }
    }
}
module.exports = eBayTradingAPI;