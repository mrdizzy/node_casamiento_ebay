function merge(obj1, obj2) {
    for (var p in obj2) {
        try {
            // Property in destination object set; update its value.
            if (obj2[p].constructor == Object) {
                obj1[p] = MergeRecursive(obj1[p], obj2[p]);

            }
            else {
                obj1[p] = obj2[p];
            }
        }
        catch (e) {
            // Property in destination object not set; create it and set its value.
            obj1[p] = obj2[p];
        }
    }
    return obj1;
}

function clone(obj) { // Deeply clones an object
    if (obj == null || typeof(obj) != 'object') return obj;

    var temp = new obj.constructor();
    for (var key in obj)
    temp[key] = clone(obj[key]);

    return temp;
}

var Factory, blueprints = [];

var Factory = function(name, attributes) {
        var copyDefaultAttributes = clone(blueprints[name]);
        var result = merge(copyDefaultAttributes, attributes)
        for (var key in result) {
            if (typeof result[key] == 'function') {
                result[key] = result[key]();
            }
        }
        return result;
    }

Factory.define = function(name, attributes) {
    blueprints[name] = attributes;
};
module.exports = Factory;