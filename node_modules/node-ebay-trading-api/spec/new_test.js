var vows = require('vows'),
    assert = require('assert'),
    eBayTradingAPI = require('./../index'),
    fs = require('fs'),
    fakeweb = require('node-fakeweb'),
    config = {
        appId: 'Appid-1111-1111-1111-111111111111',
        devId: '22222222-2222-2222-2222-222222222222',
        siteId: '3',
        certId: '444444444-4444-4444-4444-444444444444',
        authToken: '555555**555555**555555**555555**',
        use_sandbox: true
    };

// Use node-fakeweb for faking requests to the eBay API
fakeweb.allowNetConnect = false;

function fixture(filename) {
    fakeweb.registerUri({
        uri: 'https://api.sandbox.ebay.com/ws/api.dll',
        file: (__dirname + "/fixtures/" + filename + '.xml')
    });
}

var api = new eBayTradingAPI(config);

// Begin tests
vows.describe("eBay Trading API").addBatch({
    "When use_sandbox is set to true": {
        topic: {
            appId: 'Appid-1111-1111-1111-111111111111',
            devId: '22222222-2222-2222-2222-222222222222',
            siteId: '3',
            certId: '444444444-4444-4444-4444-444444444444',
            use_sandbox: true,
            authToken: "auth"
        },
        "the correct URL should be used to make requests": function(topic) {
            var api = new eBayTradingAPI(topic);
            assert.equal("api.sandbox.ebay.com", api.options.host);
        }
    },
        "When use_sandbox is set to undefined": {
        topic: {
            appId: 'Appid-1111-1111-1111-111111111111',
            devId: '22222222-2222-2222-2222-222222222222',
            siteId: '3',
            certId: '444444444-4444-4444-4444-444444444444',
            authToken: "auth"
        },
        "the correct URL should be used to make requests": function(topic) {
            var api = new eBayTradingAPI(topic);
            assert.equal("api.ebay.com", api.options.host);
        }
    },
    "When passed a valid configuration object": {
        topic: {
            appId: 'Appid-1111-1111-1111-111111111111',
            devId: '22222222-2222-2222-2222-222222222222',
            siteId: '3',
            certId: '444444444-4444-4444-4444-444444444444'
        },
        "it should not throw an error": function(topic) {
            assert.doesNotThrow(function() {
                new eBayTradingAPI(topic)
            });

        }
    },
    "When passed an invalid configuration object": {
        topic: function() {
            var required = ['appId', 'devId', 'siteId', 'certId'];
            var confs_to_test = [];
            required.forEach(function(param) {
                var conf = {
                    appId: 'Appid-1111-1111-1111-111111111111',
                    devId: '22222222-2222-2222-2222-222222222222',
                    siteId: '3',
                    certId: '444444444-4444-4444-4444-444444444444'
                }
                conf[param] = undefined;
                confs_to_test.push(conf);
            });
            return (confs_to_test);
        },
        "errors should be thrown": function(topic) {
            topic.forEach(function(conf) {
                assert.throws(function() {
                    new eBayTradingAPI(conf, Error);
                });
            });
        }
    },
    "When no authToken is specified in configuration or in makeRequest": {
        topic: function() {
            var api = new eBayTradingAPI({
                appId: 'Appid-1111-1111-1111-111111111111',
                devId: '22222222-2222-2222-2222-222222222222',
                siteId: '3',
                certId: '444444444-4444-4444-4444-444444444444'
            })
            return api;
        },
        "an error should be thrown": function(topic) {
            assert.throws(function() {
                topic.makeRequest("GetOrders", function() {});
            });
        }
    },
    "When a response returns an error message": {
        topic: function() {
            fixture("failure_auth_token_is_invalid");
            api.makeRequest("GetOrders", this.callback);
        },
        "an error should be returned": function(err, result) {
            console.log(err, result);
            assert.isNotNull(err);
            assert.equal("Validation of the authentication token in API request failed.", err);
        }
    },
    "when a response is returned with invalid xml": {
        topic: function() {
            fixture("invalid_xml");
            api.makeRequest("GetOrders", this.callback, null, "json");
        },
        "an error should be returned": function(err, result) {
            assert.isNotNull(err);
            console.log(err);
        }
    },
    "when a successful request is made in json": {
        topic: function() {
            fixture("my_messages_response");
            api.makeRequest("GetMyMessages", this.callback, null, "json");

        },
        "the Timestamp attribute should be correct": function(result) {
            assert.equal(result["Timestamp"], "2012-04-24T11:57:58.102Z", "Timestamp is not correct");
        },
        "the Messages => Message attribute should be an array": function(result) {
            assert(result["Messages"]["Message"].length);
        },
        "the subject of the last Message should be correct": function(result) {
            var messages = result["Messages"]["Message"];
            assert.equal(messages[messages.length - 1]["Subject"], "Important news for sellers", messages[messages.length - 1]["Subject"])
        }
    }
}).addBatch({

    "When making request": {
        topic: function() {
            var xmlRequest = api.makeRequest("GetOrders", function(err, res) {}, {
                OrderIDArray: {
                    OrderID: [109328352017, "251035045087-0", "251036250196-0"]
                },
                OutputSelector: ["OrderArray.Order.OrderID", "OrderArray.Order.TransactionArray.Transaction.Item"],
                Pagination: {
                    EntriesPerPage: 25,
                    PageNumber: 3
                }
            }, "json");
            return (xmlRequest);
        },
        "there should well-formed XML": function(topic) {
            fs.readFile(__dirname + '/fixtures/requests/get_orders_request.xml', 'utf-8', function(err, res) {
                assert.equal(topic, res);
            })
        }
    }
}).run();