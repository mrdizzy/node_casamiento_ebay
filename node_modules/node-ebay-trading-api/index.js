var http = require('https'),
    jsonToXml = require('json-to-xml'),
    xml2js = require('xml2js');

var eBayTradingAPI = function(appId, siteId, devId, certId, authToken) {
        this.options = {
            host: "api.sandbox.ebay.com",
            method: "POST",
            path: "/ws/api.dll",
            headers: {
                "X-EBAY-API-APP-NAME": appId,
                "X-EBAY-API-DEV-NAME": devId,
                "X-EBAY-API-CERT-NAME": certId,
                "X-EBAY-API-COMPATIBILITY-LEVEL": "765",
                "X-EBAY-API-SITEID": siteId,
                "X-EBAY-API-REQUEST-ENCODING": "XML"
            }
        };
        this.authToken = authToken;
    }

eBayTradingAPI.prototype._createBody = function(name, fields) {
    var request_name = name + 'Request',
        doc = {};
    doc[request_name] = {
        "-xmlns": 'urn:ebay:apis:eBLBaseComponents',
        "RequesterCredentials": {
            "eBayAuthToken": this.authToken
        }
    }

    mergeRecursive(doc[request_name], fields);

    return (jsonToXml(doc));
}

eBayTradingAPI.prototype.makeRequest = function(name, callback, fields, format) {

    this.options.headers["X-EBAY-API-CALL-NAME"] = name;

    var xmlBody = this._createBody(name, fields);

    var req = http.request(this.options, function(response) {
        handleResponse(response, format, callback);
    });

    req.write(xmlBody);
    req.end();
    return (xmlBody);
}

var handleResponse = function(response, format, callback) {
        var xml_result = "";
        response.on('data', function(chunk) {
            xml_result += chunk;
        });
        response.on('end', function() {
            // Handle failed responses by throwing an error
            if (xml_result.match(/<Ack>Failure<\/Ack>/)) {

                var error = xml_result.match(/<LongMessage>(.+)<\/LongMessage>/);

                callback(error[1], null); // holds the error message matched above
            }
            else {
                if (format === 'json') {
                    var xmlParser = new xml2js.Parser();
                    xmlParser.parseString(xml_result, function(err, json_data) {
                        callback(err, json_data);
                    })
                }
                else {
                    callback(null, xml_result);
                }

            }
        });
        response.on('error', function(err) {

        });
    }



function mergeRecursive(obj1, obj2) {

    for (var p in obj2) {
        try {
            // Property in destination object set; update its value.
            if (obj2[p].constructor == Object) {
                obj1[p] = MergeRecursive(obj1[p], obj2[p]);

            }
            else {
                obj1[p] = obj2[p];

            }

        }
        catch (e) {
            // Property in destination object not set; create it and set its value.
            obj1[p] = obj2[p];

        }
    }
}
module.exports = eBayTradingAPI;