var _ = require('underscore'),
    ebay = {}

module.exports = exports = function(db, eBayAPI, cb) {
    ebay.db = db;
    ebay.eBayAPI = eBayAPI;
    ebay.cb = cb;
    ebay.retrieve();
};

ebay.retrieve = function() {
    var self = this;
    this.db.get('time', function(err, res) { // Get last imported time and begin import
        if (err) {
            console.log("Could not get last imported time: ", err);
        }
        else {

            self.eBayAPI.makeRequest("GetOrders", function(err, res) {
                console.log(err, res);
                self.getOrdersFromEbay(res);
            }, {
                ModTimeFrom: res.lastModified,
                ModTimeTo: new Date().toISOString()
            }, "json");
        }
    });
};

ebay.getOrdersFromEbay = function(res) {
    var self = this;
    if (res.ReturnedOrderCountActual === '0') {
        console.log("No orders to import");
        return;
    }

    // Normalize orders, so even single orders are in an array
    var orders = res.OrderArray.Order.length ? res.OrderArray.Order : [res.OrderArray.Order],
        waiting = orders.length;

    var orderResults = this.parser(orders),
        parsedOrders = orderResults[0],
        lineItemIDs = orderResults[1],
        transactionsRequiringSKU = orderResults[2];
    this.lineItemIDs = lineItemIDs;
    this.findCustomers(parsedOrders, function(err, res) {
        parsedOrders.forEach(function(order) {
            self.db.save(order, function(error, response) {
                if (error) {
                    console.log("Unable to save raw orders. Error: " + error.error + " Reason: " + error.reason);
                }
                else {
                    waiting--;
                    if (!waiting) {
                        self.updateTime(res.Timestamp);
                        console.log("Completed");
                    }
                }
            })
        })
    })
};

ebay.findCustomers = function(orders, cb) {
    var self = this,
        waiting = orders.length;
    orders.forEach(function(o) {
        self.db.view('customers/eias_token', {
            key: o.EIASToken
        }, function(err, result) {
            if (err) {
                console.log("Unable to find customer by eias token:" + err.reason);
            }
            else {
                if (result[0]) {
                    o.customer = result[0].id;
                }
            }
            waiting--;
            
            console.log(waiting, orders.length)
            if (!waiting) {
                cb(null, true);
            }
        });
    });
}

ebay.updateTime = function(timeStamp) {
    var self = this;
    this.db.save('time', {
        lastModified: timeStamp
    }, function(err, res) {
        if (err) {
            console.log("Unable to update time:" + err.reason);
        }
        else {
            self.combineOrders();
        }
    });
};

ebay.combineOrders = function() {
    var self = this;
    var waiting = this.lineItemIDs.length;
    if (this.lineItemIDs.length > 0) {
        self.db.get(self.lineItemIDs, function(err, res) {
            res.forEach(function(order) {
                if (order.error) {
                    waiting--;
                    if (!waiting) {
                        self.cb(null, true);
                    }
                }
                else {
                    self.db.remove(order._id, order._rev, function(e, r) {
                        waiting--;
                        if (!waiting) {
                            self.cb(null, true);
                        }
                    })
                }
            });
        });
    }
    else {
        self.cb(null, true)
    }
};

ebay.parser = function(orders) {
    var lineItemIDs = [],
        transactionsRequiringSKU = [],
        parsedOrders = _.collect(orders, function(obj) {
            var newObj = {},
                transactions = obj.TransactionArray.Transaction.length ? obj.TransactionArray.Transaction : [obj.TransactionArray.Transaction];

            newObj._id = obj.OrderID;
            newObj.createdTime = obj.CreatedTime;
            newObj.shippingAddress = obj.ShippingAddress
            newObj.EIASToken = obj.EIASToken;
            newObj.BuyerUserID = obj.BuyerUserID;
            newObj.SubTotal = (obj.Subtotal["#"]);
            newObj.Total = (obj.Total["#"]);
            newObj.ShippingService = obj.ShippingServiceSelected.ShippingService;
            newObj.ShippingServiceCost = obj.ShippingServiceSelected.ShippingServiceCost["#"];

            newObj.Transactions = _.collect(transactions, function(t) {
                var newTransaction = {};
                if (!(obj.OrderID.match(/-/))) {
                    lineItemIDs.push(t.OrderLineItemID);
                }
                newTransaction.quantity = t.QuantityPurchased;
                newTransaction.TransactionID = t.TransactionID;
                newTransaction.price = t.TransactionPrice["#"];
                newTransaction.lineItemID = t.OrderLineItemID;
                newTransaction.ItemID = t.Item.ItemID;

                if (t.Variation) {

                    newTransaction.SKU = t.Variation.SKU;
                    newTransaction.VariationTitle = t.Variation.VariationTitle
                }
                else {
                    transactionsRequiringSKU.push(newTransaction);
                }
                return newTransaction;
            });
            return newObj;
        })
        return ([parsedOrders, lineItemIDs, transactionsRequiringSKU]);
}