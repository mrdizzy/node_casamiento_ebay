var vows = require('vows'),
    assert = require('assert'),
    cradle = require('cradle'),
    AddOrdersToDatabase = require('./../adapter'),
    fs = require('fs');

// ItemID: 12 digits, TransactionID: 11 digits, OrderID: 9 digits
// Single Line Order: the OrderID is the same as the OrderLineItemID which is ItemID-TransactionID
//
// Multiple Line Item IDs: OrderID: Randomly generated
// OrderLineItemID: ItemID-TransactionID
// Auctions: OrderLineItemID: ItemID-0
// Auctions: TransactionID: 0
// Setup Stub eBay API
var eBayAPI = {
    makeRequest: function(request_name, callback, params, format) {
        callback(this.err.shift(), this.response.shift());
    },
    response: [],
    err: []
}

// GOTCHA: Cache in cradle can cause unexpected errors and discrepancies!!!!
var db = new(cradle.Connection)('https://casamiento.iriscouch.com', 443, {
    cache: true,
    auth: {
        username: "casamiento",
        password: "floppsy1"
    }
}).database("test_ebay");

function resetDb(time, callback) {
    db.destroy(function(err, res) {
        if (err) {
            throw ("Could not destroy database" + err);
        }
        else {
            console.log("Destroyed database");
            db.create(function(err, res) {
                console.log("Created database: ", err, res);
                if (err) {
                    console.log("MAJOR ERROR!!!!", err)
                }
                else {
                    db.save("time", {
                        lastModified: time
                    }, function(err, res) {
                        if (err) {
                            console.log("TIME EERROR", err)
                        }
                        else {
                            callback(res);
                        }
                    });
                }
            })
        }
    })
}

function fakeResponse(name, cb) {
    fs.readFile(__dirname + '/fixtures/' + name + '.json', 'utf-8', function(err, res) {

        eBayAPI.response.push(JSON.parse(res));
        cb();
    });
}
vows.describe('Import eBay orders').addBatch({
    "and adding a single line item order": {
        topic: function() {
            console.log("DOING");
            var self = this;
            fakeResponse("order", function() {
                AddOrdersToDatabase(db, eBayAPI, self.callback);
            })
        },
        "after polling the database": {
            topic: function(topic) {
                db.all(this.callback);
            },
            "the order should have been added": function(topic) {
                assert.equal(2, topic.length, "Should be 2" + topic);
            }
        }
    }
    
}).run()

/*
addBatch({
    "after adding a single line item order": {
        topic: function() {
            var self = this;
            fakeResponse("order", function() {
                AddOrdersToDatabase(db, eBayAPI, self.callback);
            })
        },
        "the lastModified time should have been updated": {
            topic: function(topic) {
                db.get("time", this.callback);
            },
            "the lastModified time should have been updated": function(topic) {
                assert.equal('2009-02-01T10:10:10.100Z', topic.lastModified, "Time is not the same");
            }
        }
    },
    teardown: function(topic) {
        resetDb("2001-01-01T00:00:50.000Z", this.callback);
    }
}).addBatch({
    "after adding two single line item orders": {
        topic: function() {
            var self = this;
            fakeResponse("two_orders", function() {
                AddOrdersToDatabase(db, eBayAPI, self.callback);
            })
        },
        "and the database is polled": {
            topic: function() {
                db.all(this.callback)
            },

            "both orders should have been added": function(topic) {
                assert.equal(3, topic.length, "SHould be 3");
            }
        }

    },
    teardown: function(topic) {
        resetDb("2001-01-01T00:00:50.000Z", this.callback);
    }
}).addBatch({
    "after adding two single line item orders": {
        topic: function() {
            var self = this;
            fakeResponse("two_orders", function() {
                AddOrdersToDatabase(db, eBayAPI, self.callback);
            })
        },
        "and then adding an order that should combine with one order above": {
            topic: function() {
                var self = this;
                fakeResponse("combine_with_two_orders", function() {
                    AddOrdersToDatabase(db, eBayAPI, self.callback);
                })
            },
            "after polling the database": {
                topic: function() {
                    db.all(this.callback);
                },
                "both orders should have been added": function(topic) {
                    console.log("Should have combined", topic);
                }
            }
        }

    },
    teardown: function(topic) {
        resetDb("2001-01-01T00:00:50.000Z", this.callback);
    }
}).addBatch({
    "after adding two single line item orders": {
        topic: function() {
            var self = this;
            fakeResponse("two_orders", function() {
                AddOrdersToDatabase(db, eBayAPI, self.callback);
            })
        },
        "and then adding an order that should combine with both orders above": {
            topic: function() {
                var self = this;
                fakeResponse("combine_with_two_orders_both", function() {
                    AddOrdersToDatabase(db, eBayAPI, self.callback);
                })
            },
            "after polling the database": {
                topic: function() {
                    db.all(this.callback);
                },
                "both orders should have been added": function(topic) {
                    console.log("Should have combined", topic);
                }
            }
        }

    }
}).run()
*/