var vows = require('vows'),
    assert = require('assert'),
    cradle = require('cradle'),
    Factory = require('import_orders/ebay_getorders_factory'),
    AddOrdersToDatabase = require('import_orders/add_orders_to_database');
    
    // GOTCHA: Cache in cradle can cause unexpected errors and discrepancies!!!!

var OrderBuilder = function() {
        this.response = Factory("OrderResponse", {
            TimeStamp: "2009-02-01T10:10:10.100Z",
            OrderArray: {
                Order: null
            }
        });
        this.orderIDCounter = 111111111111;
    }

    // Single transaction has: transactionID and ItemID
    OrderBuilder.prototype.buildOrder = function(transactions) {
        var self = this;
        if (transactions.length) { // array
            var transactionsForOrder = [];
            transactions.forEach(function(t) {
                transactionsForOrder.push(Factory("Transaction", {
                    TransactionID: t.TransactionID,
                    OrderLineItemID: t.ItemID + '-' + t.TransactionID,
                }));
            })
            var o = Factory("Order", {
                TransactionArray: {
                    Transaction: transactionsForOrder
                },
                OrderID: ++self.orderIDCounter + ""
            })
            if (this.response.OrderArray.Order == null) {
                this.response.OrderArray.Order = o;
            }
            else if (this.response.OrderArray.Order.length) {
                this.response.OrderArray.Order.push(o);
            }
            else {
                var previousOrder = this.response.OrderArray.Order;
                this.response.OrderArray.Order = [previousOrder, o];
            }
        }
        else { // single Item Order
            var orderLineItemID = transactions.ItemID + '-' + transactions.TransactionID;
            var t = Factory("Transaction", {
                TransactionID: transactions.TransactionID,
                OrderLineItemID: orderLineItemID
            });
            t.Item.ItemID = transactions.ItemID;
            var o = Factory("Order", {
                TransactionArray: {
                    Transaction: t
                },
                OrderID: orderLineItemID
            });
            if (this.response.OrderArray.Order == null) {
                this.response.OrderArray.Order = o;
            }
            else if (this.response.OrderArray.Order.length) {
                this.response.OrderArray.Order.push(o);
            }
            else {
                var previousOrder = this.response.OrderArray.Order;
                this.response.OrderArray.Order = [previousOrder, o];
            }
        }
        return this;
    }

var db = new(cradle.Connection)('http://casamiento.iriscouch.com', 5984, {
    cache: true
}).database('test_ebay');

function resetDb(newTime, callback) {
    db.all(function(e, r) {
        if (r.length > 0) {
            var waiting = r.length;
            for (var i = 0; i < r.length; i++) {

                db.remove(r[i].id, r[i].value.rev, function(a, b) {
                    console.log("removing");
                    waiting--
                    if (!waiting) {
                        updateTime();
                    }
                });
            }
        }
        else {
            updateTime();
        }
    });

    function updateTime() {
        db.save("time", {
            lastUpdated: newTime
        }, function(error, results) {
            if (error) {
                console.log(error, results);
            }
            else {
                callback();
            }
        })
    }
}

vows.describe('Import eBay orders').addBatch({
    'After resetting the database': {
        topic: function() {
            resetDb("2010-01-03T00:00:00.000Z", this.callback);
        },
        "add a single line item order": {
            topic: function() {
                var ob = new OrderBuilder();
                ob.buildOrder({
                    ItemID: '110099445588',
                    TransactionID: '999888777'
                });
                AddOrdersToDatabase(db, ob.response, this.callback);
            },
            'then get orders from database database': {
                topic: function() {
                    db.all(this.callback);
                },
                "and order has been successfully added to database": function(error, result) {

                    assert.equal(2, result.length);
                }
            }
        }
    }
}).addBatch({
    "After resetting the database": {
        topic: function() {
            resetDb("2010-01-03T00:00:00.000Z", this.callback);
        },
        "and adding a single line item order": {
            topic: function() {
                var ob = new OrderBuilder();
                ob.buildOrder({
                    ItemID: '110099445588',
                    TransactionID: '999888777'
                });
                AddOrdersToDatabase(db, ob.response, this.callback);
            },
            "the lastModified time should have been updated": function() {
                db.get("time", function(err, res) {
                    console.log(err, res);
                    assert.equal("2009-02-01T10:10:10.100Z", res.lastUpdated);
                });
            }
        }
    }
}).addBatch({
    "After resetting the database": {
        topic: function() {
            resetDb("2010-01-03T00:00:00.000Z", this.callback);
        },
        "and adding two single line item orders": {
            topic: function() {
                var ob = new OrderBuilder();
                ob.buildOrder({
                    ItemID: '110099445588',
                    TransactionID: '999888777'
                }).buildOrder({
                    ItemID: '123456789',
                    TransactionID: '344555666'
                });
                AddOrdersToDatabase(db, ob.response, this.callback);
            },
            'then get orders from database database': {
                topic: function() {
                    db.all(this.callback);
                },
                "and order has been successfully added to database": function(error, result) {

                    assert.equal(3, result.length);
                }
            }
        }
    }
}).addBatch({
    "After resetting the database": {
        topic: function() {
            resetDb("2010-01-03T00:00:00.000Z", this.callback);
        },
        "and adding four single line item orders": {
            topic: function() {
                var ob = new OrderBuilder();
                ob.buildOrder({
                    ItemID: '110099445588',
                    TransactionID: '999888777'
                }).buildOrder({
                    ItemID: '234534132313',
                    TransactionID: '244424444'
                }).buildOrder({
                    ItemID: '543219876543',
                    TransactionID: '777777777'
                }).buildOrder({
                    ItemID: '500000000000',
                    TransactionID: '333333333'
                });
                AddOrdersToDatabase(db, ob.response, this.callback);
            },
            "and adding two duplicate single line item orders": {
                topic: function() {
                    var ob = new OrderBuilder();
                    ob.buildOrder({
                        ItemID: '500000000000',
                        TransactionID: '333333333'
                    }).buildOrder({
                        ItemID: '110099445588',
                        TransactionID: '999888777'
                    })
                    ob.response.OrderArray.Order[0].BuyerUserID = "garycooley1963";

                    ob.response.OrderArray.Order[1].BuyerUserID = "shirleypettifer3";
                    AddOrdersToDatabase(db, ob.response, this.callback);
                },
                'then get orders from database': {
                    topic: function() {
                        db.all(this.callback);
                    },
                    'should be updated': function(err, res) {
                        console.log(res);
                    }

                }
            }
        }
    }
}).addBatch({
    "After resetting the database": {
        topic: function() {
            resetDb("2010-01-03T00:00:00.000Z", this.callback);
        },
        "and adding four single line item orders": {
            topic: function() {
                var ob = new OrderBuilder();
                ob.buildOrder({
                    ItemID: '110099445588',
                    TransactionID: '999888777'
                }).buildOrder({
                    ItemID: '234534132313',
                    TransactionID: '244424444'
                }).buildOrder({
                    ItemID: '543219876543',
                    TransactionID: '777777777'
                }).buildOrder({
                    ItemID: '500000000000',
                    TransactionID: '333333333'
                });
                AddOrdersToDatabase(db, ob.response, this.callback);
            },
            "and adding one duplicate combined order": {
                topic: function() {
                    var ob = new OrderBuilder();
                    ob.buildOrder([{
                        ItemID: '234534132313',
                        TransactionID: '244424444'
                    }, {
                        ItemID: '543219876543',
                        TransactionID: '777777777'
                    }])

                    console.log(ob.response.OrderArray);
                    AddOrdersToDatabase(db, ob.response, this.callback);
                },
                'then get orders from database': {
                    topic: function() {
                        db.all(this.callback);
                    },
                    'should be updated': function(err, res) {
                        console.log(res);
                    }

                }
            }
        }
    }
}).addBatch({
    "After resetting the database": {
        topic: function() {
            resetDb("2010-01-03T00:00:00.000Z", this.callback);
        },
        "and adding four single line item orders": {
            topic: function() {
                var ob = new OrderBuilder();
                ob.buildOrder({
                    ItemID: '110099445588',
                    TransactionID: '999888777'
                }).buildOrder({
                    ItemID: '234534132313',
                    TransactionID: '244424444'
                }).buildOrder({
                    ItemID: '543219876543',
                    TransactionID: '777777777'
                }).buildOrder({
                    ItemID: '500000000000',
                    TransactionID: '333333333'
                });
                console.log("ADDING");
                AddOrdersToDatabase(db, ob.response, this.callback);
            },
            "and adding one duplicate combined order and one single duplicate order": {
                topic: function() {
                    console.log("DONE");
                    var ob = new OrderBuilder();
                    ob.buildOrder({
                        ItemID: '500000000000',
                        TransactionID: '333333333'
                    }).buildOrder([{TransactionID: '777777777', ItemID: '543219876543' }, { TransactionID: '244424444', ItemID: '234534132313' }]);

                    console.log(ob.response.OrderArray);
                    AddOrdersToDatabase(db, ob.response, this.callback);
                },
                'then get orders from database': {
                    topic: function() {
                        db.all(this.callback);
                    },
                    'should be updated': function(err, res) {
                        console.log(res);
                    }

                }
            }
        }
    }
}).run();